import tkinter as tk
from tkinter.constants import * 
from tkinter import ttk
#from PIL import Image, ImageTk
import sys
#可用數學運算
import numpy as np
import statistics as st
#可去除nan資料
from math import isnan
from itertools import filterfalse
import pandas as pd
import yfinance as yf
from matplotlib import pyplot as plt

import requests
from bs4 import BeautifulSoup
#from fake_useragent import UserAgent
import time
import random
def etfelements(etf_id):#抓etf成分的函式
  #利用header請求
  headers={'user-agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:65.0) Gecko/20100101 Firefox/65.0'}
    
  proxies = {'http': 'http://brd-customer-hl_a2b4fb4e-zone-residential:dt5kr2aam01t@zproxy.lum-superproxy.io:22225',
            'https': 'http://brd-customer-hl_a2b4fb4e-zone-residential:dt5kr2aam01t@zproxy.lum-superproxy.io:22225'}
  url = 'https://goodinfo.tw/tw/StockDetail.asp?STOCK_ID={}'.format(etf_id)
  #取得網站html
  response = requests.get(url, headers=headers, proxies=proxies, verify=False)
  html = response.content
  soup = BeautifulSoup(html, 'html.parser')
  #篩出股票名稱、持股%
  elements = soup.find_all(class_=['p4_2', 'row_bg_2n', 'row_mouse_over'])
  result_list = [element.text for element in elements]

  etf_elements = {} #創建ETF字典
  for elem in elements[len(result_list)-1]:
    elem_list = (elem.text).split()
    etf_elements[elem_list[0]] = [elem_list[1],elem_list[2],float(elem_list[3])] 
  time.sleep(5)
  return etf_elements


def stock_price_get(stock_id):#取得個股每日價格、EPS、PER
  # 股票代號
  #stock_id = 2330  
  user_agents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 7_0_4 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) CriOS/31.0.1650.18 Mobile/11B554a Safari/8536.25',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12F70 Safari/600.1.4',
    'Mozilla/5.0 (Linux; U; Android 4.4.4; zh-cn; M351 Build/KTU84P) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30'  
  ]
  user_agent = random.choice(user_agents)
  headers = {'User-Agent': user_agent}

  # 目標網址
  url = f'https://goodinfo.tw/tw/ShowK_ChartFlow.asp?RPT_CAT=PER&STOCK_ID={stock_id}&CHT_CAT=DATE'
    
  proxies = {'http': 'http://brd-customer-hl_a2b4fb4e-zone-residential:dt5kr2aam01t@zproxy.lum-superproxy.io:22225',
            'https': 'http://brd-customer-hl_a2b4fb4e-zone-residential:dt5kr2aam01t@zproxy.lum-superproxy.io:22225'}
  response = requests.get(url, headers=headers, proxies=proxies, verify=False)
    
    
    
  # 載入網頁
  #response = requests.get(url, proxies=proxy)
  html = response.content
  # 解析 HTML
  soup = BeautifulSoup(response.content, 'html.parser')
  #print(soup)
  #抓table
  try:
      table = soup.find('table', {'class': 'b1 p4_0 r0_10 row_bg_2n row_mouse_over'})
      center_elements = table.find_all(align='center')
  except:
      table = soup.find('table', {'class': 'b1 p4_4 r0_10 row_bg_2n row_mouse_over'})
      center_elements = table.find_all(align='center')

  list = []
  for el in center_elements:
      tds = el.find_all('td')
      for td in tds:
          list.append(td.text)
      # 進行資料解析或存儲等操作
  new_list = [list[i:i+12] for i in range(0, len(list), 12)]

  stock_2 = {}#內層{日期[收盤價，EPS，PER]}

  for i in new_list:
    try:
        stock_2[i[0].replace("/", "")] = [float(i[1]),float(i[4]),float(i[5])]
    except:
        stock_2[i[0].replace("/", "")] = [float(i[1]),float(i[4]),0]
  return stock_2

def etf_price_get(stock_id):#取得etf每日價格
  # etf代號
  #stock_id = 2330  
  user_agents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 7_0_4 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) CriOS/31.0.1650.18 Mobile/11B554a Safari/8536.25',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12F70 Safari/600.1.4',
    'Mozilla/5.0 (Linux; U; Android 4.4.4; zh-cn; M351 Build/KTU84P) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30'  
  ]
  user_agent = random.choice(user_agents)
  headers = {'User-Agent': user_agent}

  # 目標網址
  url = f'https://goodinfo.tw/tw/ShowK_ChartFlow.asp?RPT_CAT=PER&STOCK_ID={stock_id}&CHT_CAT=DATE'
    
  proxies = {'http': 'http://brd-customer-hl_a2b4fb4e-zone-residential:dt5kr2aam01t@zproxy.lum-superproxy.io:22225',
            'https': 'http://brd-customer-hl_a2b4fb4e-zone-residential:dt5kr2aam01t@zproxy.lum-superproxy.io:22225'}
  response = requests.get(url, headers=headers, proxies=proxies, verify=False)
    
    
    
  # 載入網頁
  #response = requests.get(url, proxies=proxy)
  html = response.content
  # 解析 HTML
  soup = BeautifulSoup(response.content, 'html.parser')
  #print(soup)
  #抓table
  try:
      table = soup.find('table', {'class': 'b1 p4_0 r0_10 row_bg_2n row_mouse_over'})
      center_elements = table.find_all(align='center')
  except:
      table = soup.find('table', {'class': 'b1 p4_4 r0_10 row_bg_2n row_mouse_over'})
      center_elements = table.find_all(align='center')

  list = []
  for el in center_elements:
      tds = el.find_all('td')
      for td in tds:
          list.append(td.text)
      # 進行資料解析或存儲等操作
  new_list = [list[i:i+12] for i in range(0, len(list), 12)]
  stock_2 = {}#內層{日期[收盤價，EPS，PER]}
  for i in new_list:
    stock_2[i[0].replace("/", "")] = [float(i[1])]
  return stock_2


def etf_price_get(stock_id):#取得etf每日價格
  # etf代號
  #stock_id = 2330  
  user_agents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 7_0_4 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) CriOS/31.0.1650.18 Mobile/11B554a Safari/8536.25',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12F70 Safari/600.1.4',
    'Mozilla/5.0 (Linux; U; Android 4.4.4; zh-cn; M351 Build/KTU84P) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30'  
  ]
  user_agent = random.choice(user_agents)
  headers = {'User-Agent': user_agent}

  # 目標網址
  url = f'https://goodinfo.tw/tw/ShowK_ChartFlow.asp?RPT_CAT=PER&STOCK_ID={stock_id}&CHT_CAT=DATE'
    
  proxies = {'http': 'http://brd-customer-hl_a2b4fb4e-zone-residential:dt5kr2aam01t@zproxy.lum-superproxy.io:22225',
            'https': 'http://brd-customer-hl_a2b4fb4e-zone-residential:dt5kr2aam01t@zproxy.lum-superproxy.io:22225'}
  response = requests.get(url, headers=headers, proxies=proxies, verify=False)
    
    
    
  # 載入網頁
  #response = requests.get(url, proxies=proxy)
  html = response.content
  # 解析 HTML
  soup = BeautifulSoup(response.content, 'html.parser')
  #print(soup)
  #抓table
  try:
      table = soup.find('table', {'class': 'b1 p4_0 r0_10 row_bg_2n row_mouse_over'})
      center_elements = table.find_all(align='center')
  except:
      table = soup.find('table', {'class': 'b1 p4_4 r0_10 row_bg_2n row_mouse_over'})
      center_elements = table.find_all(align='center')

  list = []
  for el in center_elements:
      tds = el.find_all('td')
      for td in tds:
          list.append(td.text)
      # 進行資料解析或存儲等操作
  new_list = [list[i:i+12] for i in range(0, len(list), 12)]
  stock_2 = {}#內層{日期[收盤價，EPS，PER]}
  for i in new_list:
    stock_2[i[0].replace("/", "")] = [float(i[1])]
  return stock_2

def etf_elements_stock_price(etf_id):
    # 隨機休眠時間範圍
    min_sleep = 15
    max_sleep = 25
# 生成隨機秒數
    sleep_time = random.randrange(min_sleep, max_sleep + 1)
    
    all_stock = {}
    etf = etfelements(etf_id)
    keys = etf.keys()
    keys_list = list(keys)
    for i in keys_list:
        id = "'"+i+"'"
        #print(id)
        #time.sleep(1)
        #print (stock_price_get(id))
        #print(" ")
        all_stock[i] = stock_price_get(i)
        all_stock[i]["weight"] = etf[i][2]
        time.sleep(sleep_time)
    return all_stock
def etf_price_change(etf_id):#抓etf漲跌的函式
  #利用header請求
  headers={'user-agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:65.0) Gecko/20100101 Firefox/65.0'}
    
  proxies = {'http': 'http://brd-customer-hl_a2b4fb4e-zone-residential:dt5kr2aam01t@zproxy.lum-superproxy.io:22225',
            'https': 'http://brd-customer-hl_a2b4fb4e-zone-residential:dt5kr2aam01t@zproxy.lum-superproxy.io:22225'}
  url = 'https://goodinfo.tw/tw/ShowK_Chart.asp?STOCK_ID={}&CHT_CAT2=DATE'.format(etf_id)
  #取得網站html
  response = requests.get(url, headers=headers, proxies=proxies, verify=False)
  html = response.content
  soup = BeautifulSoup(html, 'html.parser')
  #篩出股票名稱、漲跌%
  table = soup.find('table', {'class': "b1 p4_0 r0_10 row_bg_2n row_mouse_over"})
  center_elements = table.find_all(align='center')

  list = []
  for el in center_elements:
      tds = el.find_all('td')
      for td in tds:
          list.append(td.text)
      # 進行資料解析或存儲等操作
    
  for i in range(0, len(list), 12):
      new_list = [list[i:i+12] for i in range(0, len(list), 22)]
  
  list = {}
  for i in new_list:
    #print(i[6])
    list[i[0]] = [float(i[6])]
  
  
  return list

#_________________________________________________________________________________________
def generate_etf():
    
    m_text.config(state="normal")  # 解除唯讀模式
    m_text.insert("insert", "抓取資料中，請耐心等候(需要約10分鐘)......")#印出參數
    m_text.insert("insert", '\n\n')
    m_text.config(state="disabled")  # 設置回唯讀模式
    etf_o_return = etf_price_change(etf_id)
    original = etf_elements_stock_price(etf_id)
    
    
    txtnum=0
        #variance股票列表
    stocklist = list(original.keys())


    zerotime=[]
    errortime_=[]
    errortimestock=[]

    def checkdata(original):
                #確認資料是否正確

        list_=[]

        #print(stocklist)

            #1. check weight

        TF=True
        debug={}
        num=0

        if TF:
            for i in stocklist:
                if "weight" not in original[i]:
                    num+=1
                    debug[i]="Weight 錯誤"
                    TF=False

        if not(TF):
            text = "有股票沒有權重"+"權重錯誤數"+str(num)+"這些股票沒有權重"+str(debug)
            m_text.config(state="normal")  # 解除唯讀模式
            m_text.insert("insert", text)#印出參數
            m_text.insert("insert", '\n')
            m_text.config(state="disabled")  # 設置回唯讀模式
            sys.exit()
        else:
            for i in stocklist:
                original[i]["weight"]=original[i]["weight"]/100
            text = ("權重沒有錯誤")
            m_text.config(state="normal")  # 解除唯讀模式
            m_text.insert("insert", text)#印出參數
            m_text.insert("insert", '\n')
            m_text.config(state="disabled")  # 設置回唯讀模式
            





        timenum=[]
        for i in stocklist:
            timenum.append(len(list(original[i].keys()))-1)



        max_=np.max(timenum)
        index=timenum.index(max_)

        timelist=list(original[stocklist[index]].keys()) #時間
        del timelist[-1]
        list_.append(timelist)
        list_.append(timenum)

        def errordata(original):
            #errordata timenum timelist
            errortime={}
            #處理時間
            middel=[]
            for i in timelist:
                #k=0
                for j in stocklist:
                    if i not in original[j]:
                        original[j][i]=[]
                        middel.append(i)
                        errortime[j]=middel
                    #k+=1
            #print(errortime)
            return errortime

        #print(timelist)


            #2. check time

        TF=True

        if True:
            time={}
            for i in stocklist:
                time[i]=list(original[i].keys())
                del time[i][-1] 

            debug={}
            bug=[]
            num=0

            for i in timelist:
                for j in stocklist:
                    bug=[]
                    check=True
                    if not(i in time[j]):
                        bug.append(j)
                        TF=False
                        num=num+1
                        debug[i]=bug

            d=len(timelist)
            list_.append(d)

            if not(TF):

                #print("沒有權重錯誤")
                text = ("有時間錯誤"+"時間錯誤數"+str(num)+"這些有時間錯誤"+debug)
                #print(timenum)
                
                global errortime_
                global errortimestock
                errortime_=errordata(original)
                errortimestock=list(errortime_.keys())
                #list_.append(errortime_)
                #list_.append(errortimestock)
                TF=False
                #sys.exit()
            else:
                text = ("沒有時間錯誤")            
            m_text.config(state="normal")  # 解除唯讀模式
            m_text.insert("insert", text)#印出參數
            m_text.insert("insert", '\n')
            m_text.config(state="disabled")  # 設置回唯讀模式





            #3. check data




        debug={}
        num=0

        if TF: 
            #print(errortimestock)
            for i in stocklist:
                for j in timelist:
                    bug=[]
                    check=True
                    for k in range(0,3):
                        if not(isinstance(original[i][j][k], float) or isinstance(original[i][j][k],int)):
                            num=num+1

                            if k==0:
                                bug.append("股價錯誤")
                            if k==1:
                                bug.append("EPS錯誤")
                            if k==2:
                                bug.append("PER錯誤")
                            #print(bug)

                            debug[i]={}
                            debug[i][j]=bug 

        if not(TF): 
            for i in stocklist:
                if i not in errortimestock:
                    for j in timelist:
                        bug=[]
                        check=True
                        for k in range(0,3):
                            if not(isinstance(original[i][j][k], float) or isinstance(original[i][j][k],int)):
                                num=num+1

                                if k==0:
                                    bug.append("股價錯誤")
                                if k==1:
                                    bug.append("EPS錯誤")
                                if k==2:
                                    bug.append("PER錯誤")
                                #print(bug)

                                debug[i]={}
                                debug[i][j]=bug 
                else:
                    realtime=[] #可能要變成global??
                    for n in timelist:
                        if n not in errortime_[i]:
                            realtime.append(n)


                    for j in realtime:
                        bug=[]
                        check=True
                        for k in range(0,3):
                            if not(isinstance(original[i][j][k], float) or isinstance(original[i][j][k],int)):
                                num=num+1

                                if k==0:
                                    bug.append("股價錯誤")
                                if k==1:
                                    bug.append("EPS錯誤")
                                if k==2:
                                    bug.append("PER錯誤")
                                #print(bug)

                                debug[i]={}
                                debug[i][j]=bug                     


        if num==0:
            TF=True
        else:
            TF=False

        if not(TF):
            text = ("有float錯誤"+"float錯誤數"+str(num) +"這些有float錯誤"+debug)
            
            #sys.exit()
            return list_

        else:
            text=("沒有float錯誤")
            
            return list_ #[timelist,timenum,d]
        m_text.config(state="normal")  # 解除唯讀模式
        m_text.insert("insert", text)#印出參數
        m_text.insert("insert", '\n')
        m_text.config(state="disabled")  # 設置回唯讀模式
    if True: #整理資料開關
        checkdataresult=checkdata(original)
        #print(checkdataresult)
        timelist=checkdataresult[0]
        #print(timelist)
        timenum=checkdataresult[1]
        #print(checkdataresult)
        d=checkdataresult[2]
        #print(errortime_)
        #print(errortimestock)
        #errortime_=checkdataresult[3]
        #errortimestock=checkdataresult[4]



    if False: #timelist開關
        list_=[]
        timenum=[]
        for i in stocklist:
            timenum.append(len(list(original[i].keys()))-1)



        max_=np.max(timenum)
        index=timenum.index(max_)

        timelist=list(original[stocklist[index]].keys()) #時間
        del timelist[-1]
        list_.append(timelist)
        list_.append(timenum)   
        print(timelist)

    #sys.exit()

    def arrangedata1(original):
        #整理資料1

        data={}
        for i in stocklist:
            data[i]={"時間":{}}
            for j in timelist:
                data[i]["時間"][j]={"股價":original[i][j][0], "EPS": original[i][j][1],"PER":original[i][j][2]}

            data[i]["比重"]=original[i]['weight']
        print(data)
        print(".","\n")
        return data #回傳資料型態dict



    def arrangedata2(original):
        #整理資料2
        #print(errortime_,"--")

        #print(errortimestock,"---")

        data={}
        global zerotime

        for i in stocklist:
            if i not in errortimestock:
                data[i]={"時間":{}}
                for j in timelist:
                    data[i]["時間"][j]={"股價":original[i][j][0], "EPS": original[i][j][1],"PER":original[i][j][2]}

                data[i]["比重"]=original[i]['weight']
            else:
                realtime=[] #可能需要變成global
                for n in timelist:
                    if n not in errortime_[i]:
                        realtime.append(n)


                data[i]={"時間":{}}
                for j in realtime:
                    data[i]["時間"][j]={"股價":original[i][j][0], "EPS": original[i][j][1],"PER":original[i][j][2]}

                data[i]["比重"]=original[i]['weight']

                if len(realtime)==0:
                    zerotime.append(i)


        #print("整理後的資料",data)
        ###############opentxt(data,"整理後的data")
        #print(".","\n")
        return data #回傳資料型態dict





    data=arrangedata2(original) #用子程式整理資料

    def checkarrangedata2(data):
        #check arrangedata2是否錯誤
        stock_=list(data.keys())
        stock_num_=len(stock_)
        time_num_=[]
        for i in stock_:
            time_num_.append(len(data[i]["時間"].keys()))
        #print(time_num_)
        list_=[]
        list_.append(stock_num_)
        list_.append(time_num_)

        return list_
    #print(checkarrangedata2(data))

    #sys.exit() #封印


    #data = {"2330": {"時間": {"20130512": {"股價": 496, "EPS": 39.35}, "20130511": {"股價": 499, "EPS": 39.35}, "20130510": {"股價": 503, "EPS": 39.35}}, "財務分析": {"無": "無"}, "比重":0.2}, "2881": {"時間":{"20130512": {"股價": 59, "EPS": 3.54},
    #                                                                                                                                                                            "20130511": {"股價": 59.5, "EPS": 3.54}, "20130510": {"股價": 59.2, "EPS": 3.54}}, "比重":0.3}, "2882": {"時間":{"20130512": {"股價": 42.65, "EPS": 2.58}, "20130511": {"股價": 43.7, "EPS": 2.58}, "20130510": {"股價": 43.05, "EPS": 2.58}}, "比重":0.5}}
    #print(data)

    #rf=float(input("請輸入無風險利率無風險利率")) #variance無風險利率



    retrun = {} #variance個股報酬
    stockstatistic={} #variance個股的statistic
    statistic={} #variance工具

    #stocklist = list(data.keys()) #variance股票列表

    def checkweight(data):
        #確認比重
        TF=True

        sum_=0.0 #variance工具
        for i in stocklist:
            rationum=data[i]["比重"]
            sum_=sum_+rationum
        if sum_!=1:

            text=("權重加總不為1"+"加總為"+str(sum_))
            #sys.exit()
            m_text.config(state="normal")  # 解除唯讀模式
            m_text.insert("insert", text)#印出參數
            m_text.insert("insert", '\n')
            m_text.config(state="disabled")  # 設置回唯讀模式
                    
            if not(sum_>=0.99 and sum_<=1.01):
                text=("權重誤差太大")
                sys.exit()
            else:
                text=("但還可接受")
                if len(zerotime)!=0:
                    TF=False
            m_text.config(state="normal")  # 解除唯讀模式
            m_text.insert("insert", text)#印出參數
            m_text.insert("insert", '\n')
            m_text.config(state="disabled")  # 設置回唯讀模式

        #    else:
        #        if len(zerotime)!=0:
        #            print("應為有股票沒有資料，對權重進行調整")
        #            TF=False
        #            adjustweight=1.0

        #            for i in zerotime:
        #                adjustweight=adjustweight-data[i]["比重"]
        #                data[i]["比重"]=0.0
        #            for i in stocklist:
        #                if i not in zerotime:
        #                    data[i]["比重"]=(data[i]["比重"]/adjustweight)
        else:
            if len(zerotime)!=0:
                TF=False
            text=("權重總和為1")
                    
            m_text.config(state="normal")  # 解除唯讀模式
            m_text.insert("insert", text)#印出參數
            m_text.insert("insert", '\n')
            m_text.config(state="disabled")  # 設置回唯讀模式
        #    if len(zerotime)!=0:
        #        adjustweight=1.0

        #        for i in zerotime:
        #            adjustweight=adjustweight-data[i]["比重"]
        #            data[i]["比重"]=0.0
        #        for i in stocklist:
        #            if i not in zerotime:
        #                data[i]["比重"]=(data[i]["比重"]/adjustweight)

        return TF
        #sum_=0 #龜苓膏

    def adjustweight(data):

        text=("因為有股票沒有資料，對權重進行調整")
        adjustweight=1.0
        m_text.config(state="normal")  # 解除唯讀模式
        m_text.insert("insert", text)#印出參數
        m_text.insert("insert", '\n')
        m_text.config(state="disabled")  # 設置回唯讀模式
        for i in zerotime:
            adjustweight=adjustweight-data[i]["比重"]
            data[i]["比重"]=0.0
        for i in stocklist:
            if i not in zerotime:
                data[i]["比重"]=(data[i]["比重"]/adjustweight)
        return data
        


    TFweight=checkweight(data)
    #print(TFweight)
    if not(TFweight):
        data=adjustweight(data)
        ###############opentxt(data,"adjustdata")
    #print(data)

    #sys.exit() #封印
    #-----------------------------------------------------------------------
    #以
    #下
    #為
    #主
    #程
    #市
    #-----------------------------------------------------------------------
    #timelist = list(data[stocklist[0]]["時間"]) #variance時間列表
    #d=len(timelist)

    #ETF適用原本的，新的是用選擇的

    n=len(stocklist) #variance股票數


    retrunlist=[] #variance工具
    calculate=0.00 #variance工具

    #-----------------------------------------------------------------------
    #算個股retrun, retrunavg, retrunvar, retrunstd, sharpe ratio, PER, EPS

    for i in stocklist:
        retrunlist=[]
        #return
        for j in range(0,len(timelist)-1): #算個股retrun

            timelistearly=timelist[j+1] #如果時間順序不同在這邊調換
            timelistlast=timelist[j]
            calculate=(data[i]["時間"][timelistlast]["股價"]-data[i]["時間"][timelistearly]["股價"])/data[i]["時間"][timelistearly]["股價"]
            retrunlist.append(calculate)
            retrun[i]=retrunlist #從「時間最近到最不近」的retrun

        statistic["n"]=len(retrunlist)
        statistic["avg"]=np.average(retrunlist)
        statistic["var.s"]=np.var(retrunlist,ddof=1)
        statistic["std.s"]=np.std(retrunlist,ddof=1)
        statistic["Sharpe Ratio"]=(statistic["avg"]-rf)/statistic["std.s"]

        sum_=0.0
        for j in timelist:
            EPS=data[i]["時間"][j]["EPS"]
            sum_=EPS+sum_
        EPSavg=sum_/d

        sum_=0.0
        for j in timelist:
            PER=data[i]["時間"][j]["PER"]
            sum_=PER+sum_
        PERavg=sum_/d

        statistic["EPS"]=EPSavg
        statistic["PER"]=PERavg
        #print(statistic)
        stockstatistic[i]=statistic
        statistic={}                #{股票:{n,avg,var.s,std.s,sharperatio,EPS,PER},...}
    #print(stockstatistic)
    ###############opentxt(stockstatistic,"stockstatistic")




    #-----------------------------------------------------------------------
    #對股票作排序
    #低波動,高成長率,高本益比,高股息

    from operator import itemgetter


    type_dict_={"低波動":[],"高成長率":[],"低本益比":[],"高股息":[]}
    type_dict_keys=list(type_dict_.keys())

        #低波動，var由低到高排列
    sorted_dict_=dict(sorted(stockstatistic.items(), key=lambda x: x[1]['var.s']))
    ###############opentxt(sorted_dict_,"sorted_dict_var")
    sorted_list_var=list(sorted_dict_.keys())
    sorted_dict_={}
    #print(sorted_list_var)

        #高成長率，avg由高到低排列
    sorted_dict_=dict(sorted(stockstatistic.items(), key=lambda x: x[1]['avg'], reverse=True))
    ###############opentxt(sorted_dict_,"sorted_dict_avg")
    sorted_list_avg=list(sorted_dict_.keys())
    sorted_dict_={}

        #低本益比，PER由高到低排列
    for i in stocklist:
        if stockstatistic[i]["PER"]==0:
            stockstatistic[i]["PER"]=10**10
    sorted_dict_=dict(sorted(stockstatistic.items(), key=lambda x: x[1]['PER']))
    ###############opentxt(sorted_dict_,"PER排序")
    sorted_list_PER=list(sorted_dict_.keys())
    sorted_dict_={}

        #高股息，EPS由高到低排列
    sorted_dict_=dict(sorted(stockstatistic.items(), key=lambda x: x[1]['EPS'], reverse=True))
    ###############opentxt(sorted_dict_,"EPS排序")
    sorted_list_EPS=list(sorted_dict_.keys())
    sorted_dict_={}

    #sys.exit() 封印

    #-----------------------------------------------------------------------
    #依照所選股數，選出左對應的股數

    #def的部分
    #type_num_=int(input("請選擇想要的股數"))
    if type_num_>n:
        text=("想要股數大於成份股")
        m_text.config(state="normal")  # 解除唯讀模式
        m_text.insert("insert", text)#印出參數
        m_text.insert("insert", '\n')
        m_text.config(state="disabled")  # 設置回唯讀模式
        sys.exit()

    def lowvar():
        newstocklist=sorted_list_var[0:type_num_]
        return newstocklist
    def highavg():
        newstocklist=sorted_list_avg[0:type_num_]
        return newstocklist
    def highPER():
        newstocklist=sorted_list_PER[0:type_num_]
        return newstocklist
    def highEPS():
        newstocklist=sorted_list_EPS[0:type_num_]
        return newstocklist

    #type的選擇

    #type_str_=input("請選擇想要的投資偏好：低波動、高成長率、高本益比、高股息")


    if type_str_=="低波動":
        newstocklist=lowvar()
        #################print(newstocklist)
        #################print("低波動")

    elif type_str_=="高成長率":
        newstocklist=highavg()
        #################print(newstocklist)
        #################print("高成長率")

    elif type_str_=="低本益比":
        newstocklist=highPER()
        #################print(newstocklist)
        #################print("低本益比")

    elif type_str_=="高股息":
        newstocklist=highEPS()
        print(newstocklist)
        #################print("高股息")

    else:
        text=("請輸入低波動、高成長率、高本益比、高股息其中一個")
        m_text.config(state="normal")  # 解除唯讀模式
        m_text.insert("insert", text)#印出參數
        m_text.insert("insert", '\n')
        m_text.config(state="disabled")  # 設置回唯讀模式
        sys.exit()


    #-----------------------------------------------------------------------
    #    ＼○／
    #     /       <= 這我
    # 彡ノ)
    #━━━━━┒ 
    #┓┏┓┏┓┃ 
    #┛┗┛┗┛┃
    #┓┏┓┏┓┃
    #┛┗┛┗┛┃＼○／
    #┓┏┓┏┓┃  /
    #┛┗┛┗┛┃ノ)
    #┓┏┓┏┓┃
    #┛┗┛┗┛┃
    #┓┏┓┏┓┃
    #┛┗┛┗┛┃
    #┓┏┓┏┓┃
    #┛┗┛┗┛┃川
    #┓┏┓┏┓┃＼     ／
    #┛┗┛┗┛┃＼)－○／
    #┓┏┓┏┓┃
    #┛┗┛┗┛┃
    #┓┏┓┏┓┃
    #┛┗┛┗┛┃
    #┓┏┓┏┓┃
    #┛┗┛┗┛┃  川
    #┓┏┓┏┓┃ヾノ
    #┛┗┛┗┛┃  ｜
    #┓┏┓┏┓┃ヽ|ノ
    #┛┗┛┗┛┃  ○
    #┓┏┓┏┓┃
    #┛┗┛┗┛┃
    #┓┏┓┏┓┃
    #┛┗┛┗┛┃
    #┓┏┓┏┓┃
    #┃┃┃┃┃┃
    #┻┻┻┻┻┻_(┐「﹃ﾟ｡)__
    #-----------------------------------------------------------------------

    #算ETF, covariance(重要)，不變子程式


    #定義correlation, cov matrix 工具
    corrmatrix = [[0] * (n) for i in range(n)]
    #print(np.matrix(corrmatrix))

    #算corrmatrix和covmatrix
    for i in range(0,n):
        for j in range(0,n):
            calculate=st.correlation(retrun[stocklist[(i)]],retrun[stocklist[(j)]])
            corrmatrix[i][j]=calculate

    OLDETFcorrmatrix=np.array(corrmatrix) #variance 舊ETF的corrmatrix
    #print(np.matrix(OLDETFcorrmatrix))

    for i in range(0,n):
        for j in range(0,n):
            calculate=st.covariance(retrun[stocklist[(i)]],retrun[stocklist[(j)]])
            corrmatrix[i][j]=calculate

    OLDETFcovmatrix=np.array(corrmatrix) #variance 舊ETF的covmatrix
    #print(np.matrix(OLDETFcovmatrix))

    #各股比率
    ratio_=[]
    for i in stocklist:
        ratio_.append(data[i]["比重"])
    ratio=np.array(ratio_)
    #print(ratio)

    #weiage weivar weistd sharperatio
    returnavg=[]
    for i in stocklist:
        returnavg.append(stockstatistic[i]["avg"])
    returnavg=np.array(returnavg)
    weiavg=np.transpose(ratio).dot(returnavg) #舊ETF的weiavg
    ###############print("舊ETF日平均:",weiavg,sep="")

    weivar=np.transpose(ratio).dot(OLDETFcovmatrix).dot(ratio) #舊ETF的weivar
    ###############print("舊ETF日變異數:",weivar,sep="")
    weistd=np.sqrt(weivar) #舊ETF的weistd
    ###############print("舊ETF日標準差:",weistd,sep="")

    #年化

    yearavg=(1+weiavg)**365-1
    yearvar1=np.sqrt((weistd**2+(weiavg+1)**2)**365-(1+weiavg)**730)
    yearvar2=weivar/365

    if yearvar1<0:
        text=("可能有計算誤差")
        m_text.config(state="normal")  # 解除唯讀模式
        m_text.insert("insert", text)#印出參數
        m_text.insert("insert", '\n')
        m_text.config(state="disabled")  # 設置回唯讀模式
        yearstd=np.nan
    else:
        yearstd=yearvar1**(1/2)

    ###############print("舊ETF年化日平均:",yearavg,"\n","舊ETF年化日變異數:",yearvar1,"\n","舊ETF年化日標準差:",yearstd,sep="")

    if yearstd==0:
        OLDETFsharperatio="無限大"
    else:
        OLDETFsharperatio=(yearavg-rf)/yearstd

    ###############print("舊ETF年化sharpe ratio:",OLDETFsharperatio,sep="")

    #舊ETF單日最大跌幅

    ratioretrun=[]
    OLDETFretrun=[]
    for i in range(0,d-1):
        sum_=0
        for j in range(0,n):
            sum_=sum_+(retrun[stocklist[j]][i]*ratio_[j])
        OLDETFretrun.append(sum_)
        #print(OLDETFretrun)
    ###############print("舊ETF每天retrun:",OLDETFretrun,sep="")
    maxretrunfall=np.min(OLDETFretrun)
    ###############print("舊ETF單日最大跌幅:",maxretrunfall,sep="")

    #-----------------------------------------------------------------------

    #需要先確定那些股票需要用
    #找出最適投資組合，需用子程式

    #修改股數、股票
    n=type_num_
    stocklist=newstocklist

        #非向量

    #1.expected expectation(α0)
    #ExpectedyearEX=float(input("輸入期望年報酬"))
    #ExpectedyearEX=0.06 #預期年報酬
    ExpectedEX=(1+ExpectedyearEX/100)**(1/365)-1 
    #print(ExpectedEX)

    #2.risk-free retrun(γ0)
        #rf

    #3.risk-free weight
    riskfreeweight=0.0

        #向量

    #3.covmatrix(Σ) 要修改
    corrmatrix = [[0] * (n) for i in range(n)]
    for i in range(0,n):
        for j in range(0,n):
            calculate=st.covariance(retrun[newstocklist[i]],retrun[newstocklist[j]])
            corrmatrix[i][j]=calculate

    NEWETFcovmatrix=np.array(corrmatrix) 

    #4.unit vector(1m)
    unitvector = np.array([[1.0]*(1) for i in range(n) ])
    #print(np.matrix(unitvector))

    #5.expectation vector(α_had) 要修改
        #returnavg
    returnavg=[]
    for i in newstocklist:
        returnavg.append(stockstatistic[i]["avg"])
    returnavg=np.array([returnavg])
    returnavg=np.transpose(returnavg)
    #print(returnavg)

    #6.risky assets weight vector(w_had)
    riskyweightvector = np.array([[0.0]*(1) for i in range(n)])
    #print(np.matrix(weightvector))


        #計算
    covmatrixinverse=np.linalg.inv(NEWETFcovmatrix)
    factor=returnavg-unitvector*rf
    #print(factor)
    scalar=np.transpose(factor).dot(covmatrixinverse).dot(factor)
    #print(scalar)
    scalarnum=scalar[0,0]
    #print(scalarnum)
    Lambda=(ExpectedEX-rf)/scalarnum
    #print(Lambda)

    #print("")

    riskyweightvector=Lambda*(covmatrixinverse.dot(factor))

    riskyweightlist=list(list(np.transpose(riskyweightvector))[0])
    #print("risky assets權重:",riskyweightlist)
    #print(np.sum_(riskyweightvector))
    riskfreeweight=1-np.sum(riskyweightvector)
    #print("risk-free asset權重:",riskfreeweight,sep="")

        #權重dict
    NEWETF={}
    for i in range(0,n):
        statistic={"權重":float(riskyweightvector[i])}
        NEWETF[stocklist[i]]=statistic
    NEWETF["risk-free"]={"權重":riskfreeweight}
    #print(NEWETF)

    #print("")

    #新ETF預期報酬率、變異數、標準差

    NEWETFEX=riskfreeweight*rf+float(np.transpose(riskyweightvector).dot(returnavg))
    NEWETFVar=round(float(np.transpose(riskyweightvector).dot(NEWETFcovmatrix).dot(riskyweightvector)),20) #可能有計算誤差
    NEWETFStd=np.sqrt(NEWETFVar)
    ###############print("新ETF預期報酬率:","{:.4%}".format(NEWETFEX),"\n","新ETF變異數:",NEWETFVar,"\n","新ETF標準差:","{:.4%}".format(NEWETFStd),sep="")

    #年化

    NEWyearEX=(1+NEWETFEX)**365-1
    if NEWETFStd==0:
        NEWyearVar1=0
    else:
        NEWyearVar1=np.sqrt((NEWETFStd**2+(NEWETFEX+1)**2)**365-(1+NEWETFEX)**730) #電腦計算會有誤差
    NEWyearVar2=NEWETFVar/365
    NEWyearStd=np.sqrt(NEWyearVar2)
    ###############print("新ETF預期年化報酬率:","{:.4%}".format(NEWyearEX),"\n","新ETF年化變異數:","{:.4%}".format(NEWyearVar1),"\n","新ETF年化標準差:","{:.4%}".format(NEWyearStd),sep="")

    #新ETF年化sharpe ratio
    #有可能為0

    if NEWyearStd==0:
        NEWETFsharperatio="無限大"
    else:
        NEWETFsharperatio=(NEWyearEX-rf)/NEWyearStd  

    ###############print("新ETF年化sharpe ratio:",NEWETFsharperatio,sep="")

    #新ETF單日最大跌幅
    #NEWETF return，由新到舊
    ratioretrun=[] #工具
    NEWETFretrun=[]

    for i in range(0,d-1):
        sum_=0
        for j in range(0,n):
            sum_=sum_+(retrun[newstocklist[j]][i]*riskyweightlist[j])
        sum_=sum_+rf*riskfreeweight
        NEWETFretrun.append(sum_)
        #print(NEWETFretrun)
    #print("新ETF每天retrun:",NEWETFretrun,sep="")
    ###############opentxt(NEWETFretrun,"新ETF每天retrun")

    NEWmaxretrunfall=np.min(NEWETFretrun)
    ###############print("新ETF單日最大跌幅:",NEWmaxretrunfall,sep="")


    #stockprice 由新到舊

    price=0.0
    stockprice={}
    onestockprice=[]
    for i in newstocklist:
        onestockprice=[]
        for j in timelist:
            onestockprice.append(data[i]["時間"][j]["股價"])
        stockprice[i]=onestockprice
    ###############print("由新到舊",stockprice)
    ###############opentxt(stockprice,"new protfolio stock price 由新到舊")

    #債券價格

    couponrate=0.03
    CF=couponrate*1000
    PV=0
    for i in range(1,5+1):
        PV=PV+CF/(1+rf)**i
    PV=PV+1000/(1+rf)**i
    ###############print("公債價格",PV)


    #NEWETF股價，由新到舊

    NEWETFdict={"時間":{}}
    for i in range(d):
        sum_=0
        for j in range(n):
            price=stockprice[newstocklist[j]][i]*riskyweightlist[j]
            #print(timelist[i],price)
            sum_=sum_+price
        sum_=sum_+PV*riskfreeweight
        NEWETFdict["時間"][timelist[i]]=sum_
    ###############print("新ETF價格:",NEWETFdict,sep="")
    ###############opentxt(NEWETFdict,"新ETF價格")
    #-----------------------------------------------------------------------

    #舊ETF比率：rf=0
    #           ratio_
    #
    #新ETF成分股：newstocklist
    #新ETF比率："risky assets權重",riskyweightlist
    #           "risk-free asset權重:",riskfreeweight
    #w= { code:[], w_o:[], w_n:[] }
    w={}

    if type_str_=="低波動":
        w["code"]=sorted_list_var
    elif type_str_=="高成長率":
        w["code"]=sorted_list_avg
    elif type_str_=="低本益比":
        w["code"]=sorted_list_PER
    elif type_str_=="高股息":
        w["code"]=sorted_list_EPS

    output=ratio_
    output.insert(0,0)
    w["w_o"]=output
    output=riskyweightlist                #工具
    output.insert(0,riskfreeweight)
    w["w_n"]=output

    #"舊ETF年化日平均:",yearavg
    #"舊ETF年化日標準差:",yearstd
    #"舊ETF年化sharpe ratio:",OLDETFsharperatio
    #"舊ETF單日最大跌幅:",maxretrunfall
    #etf_o= {return:float, std:float, sr:float, max_d:float }
    etf_o={}
    etf_o["return"]=yearavg
    etf_o["std"]=yearstd
    etf_o["sr"]=OLDETFsharperatio
    etf_o["max_d"]=maxretrunfall


    #"新ETF預期年化報酬率:","{:.4%}".format(NEWyearEX)
    #"新ETF年化標準差:","{:.4%}".format(NEWyearStd)
    #"新ETF年化sharpe ratio:",NEWETFsharperatio
    #"新ETF單日最大跌幅:",NEWmaxretrunfall
    #etf_n= {return:float, std:float, sr:float, max_d:float }
    etf_n={}
    etf_n["return"]=NEWyearEX
    etf_n["std"]=NEWyearStd
    etf_n["sr"]=NEWETFsharperatio
    etf_n["max_d"]=NEWmaxretrunfall


    #timelist
    #"新ETF價格",NEWETFdict
    #"新ETF每天retrun:",NEWETFretrun
    #etf_n_return={date:[],return:[],price[]}
    etf_n_return={}
    etf_n_return["date"]=timelist
    etf_n_return["return"]=NEWETFretrun
    output=[]
    for i in timelist:
        output.append(NEWETFdict["時間"][i])
    etf_n_return["price"]=output
#___________________________________________________畫圖
            

    #原etf報酬
    df_etf_daily=pd.DataFrame(etf_o_return)
    df_etf_daily=df_etf_daily.transpose()
    df_etf_daily = df_etf_daily.iloc[::-1]
    df_etf_daily.rename(columns={0 : 'Return of ETF'}, inplace=True)
    df_etf_daily.iloc[0,0]=0
    # print(df_etf_daily)

    value = 1

    for i in range(len(df_etf_daily)):
        dr=df_etf_daily.iloc[i,0]/100+1
        value= value*dr
        df_etf_daily.iloc[i, 0] = value

        # print(value)
    # df_etf_daily.reset_index(drop=True)
    df_etf_daily.reset_index(drop=False, inplace=True)
    df_etf_daily.rename(columns={'index':'Date'}, inplace=True)
    #print(df_etf_daily)

    #優化etf報酬

    df_daily_r=pd.DataFrame.from_dict(etf_n_return, orient='index')
    df_daily_r = df_daily_r.transpose()
    del(df_daily_r['price'])
    del(df_daily_r['date'])
    df_daily_r.fillna(0, inplace=True)
    # df_daily_r.set_index('date', inplace=True)
    df_daily_r = df_daily_r.iloc[::-1]
    # print(df_daily_r)
    value = 1

    for i in range(len(df_daily_r)):
        dr=df_daily_r.iloc[i,0]+1
        value= value*dr
        df_daily_r.iloc[i,0] = value

        # print(value)
    # df_daily_r.reset_index(drop=True)
    df_daily_r.reset_index(drop=True, inplace=True)
    df_daily_r.rename(columns={'return':'Optimized Return'},inplace=True)
    #print(df_daily_r)


    #繪圖
    backtesting = pd.concat([df_etf_daily,df_daily_r],axis=1)
    backtesting.set_index(keys='Date',drop=True, inplace=True)
    # print(backtesting)
    plt.figure(figsize=(1,0.3))  # 寬度為8英寸，高度為6英寸

    backtesting.plot()
    plt.savefig('plot.png')
    
    img =tk.PhotoImage(file='plot.png')
    test = tk.Label(return_frame,image=img)
    test.pack()    
#_________________________________________________________
    print(etf_n)
    for i in (etf_o).keys():
        print(str(round(etf_o[i],5))," ",str(etf_n[i]))

        old_stock_label = tk.Label(old_statistic_frame, 
                       text=str(round(etf_o[i],5)),
                       font=('Arial',15,'bold'),
                       fg='#f0f0c9',
                       bg="#124e78",
                       width=10
                          )
        old_stock_label.pack()
                                   
        new_stock_label = tk.Label(new_statistic_frame, 
                       text=str(round(etf_n[i],5)),
                       font=('Arial',15,'bold'),
                       fg='#f0f0c9',
                       bg="#124e78",
                       width=10
                      )
        new_stock_label.pack()
    
    
    count = len(w.get("code", []))
    for i in range(count):
        if i ==0:
            weight_text.config(state="normal")  # 解除唯讀模式
            weight_text.insert("insert", w['code'][i]+"                             "+str(round(w['w_o'][i],3))+"                         "+str(round(w['w_n'][i],3)))#印出參數
            weight_text.insert("insert", '\n')
            weight_text.config(state="disabled")  # 設置回唯讀模式
        else:
            weight_text.config(state="normal")  # 解除唯讀模式
            weight_text.insert("insert", w['code'][i]+"                             "+str(round(w['w_o'][i],3))+"                     "+str(round(w['w_n'][i],3)))#印出參數
            weight_text.insert("insert", '\n')
            weight_text.config(state="disabled")  # 設置回唯讀模式

    
        #print(w)



    ###############opentxt(w,"w")
    ###############opentxt(etf_o,"etf_o")
    ###############opentxt(etf_n,"etf_n")
    ###############opentxt(etf_n_return,"etf_n_return")


def show():
    password=test.get()
    print(password)

window = tk.Tk()
window.title('ETF成分客製化幫手')
window.geometry('1200x700')
window.resizable(False, False)
#window.iconbitmap('icon.ico')
#window.configure(background='#FFFFFF')
#test = tk.Button(text="測試")
#test.place(x=1300,y=200,anchor=CENTER)

category_label = tk.Label(window, 
                   text='選擇題材/產業別指數',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#d74e09"
                  )
category_label.place(x=10,y=30,anchor=NW)
risk_label = tk.Label(window, 
                   text='無風險報酬%',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#d74e09"
                  )
risk_label.place(x=10,y=65,anchor=NW)
amount_label = tk.Label(window, 
                   text='希望檔數',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#d74e09"
                  )
amount_label.place(x=10,y=100,anchor=NW)
prefer_label = tk.Label(window, 
                   text='選擇投資偏好',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#d74e09"
                  )
prefer_label.place(x=10,y=135,anchor=NW)
ex_label = tk.Label(window, 
                   text='期望年報酬%',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#d74e09"
                  )
ex_label.place(x=10,y=170,anchor=NW)
#輸入項

etf_box = ttk.Combobox(window, values=[
'0050	元大台灣50'   , 
'0051	元大中型100',
'0052	富邦科技',
'0053	元大電子',
'0055	元大MSCI金融',
'0056	元大高股息',
'0057	富邦摩台',
'006203	元大MSCI台灣',
'006204	永豐臺灣加權',
'006208	富邦台50',
'00690	兆豐臺灣藍籌30',
'00692	富邦公司治理',
'00701	國泰股利精選30',
'00713	元大台灣高息低波',
'00730	富邦臺灣優質高息',
'00728	第一金工業30',
'00731	復華富時高息低波(原簡稱:FH富時高息低波)',
'00733	富邦臺灣中小',
'00850	元大臺灣ESG永續',
'00878	國泰永續高股息',
'00881	國泰台灣5G+',
'00891	中信關鍵半導體',
'00892	富邦台灣半導體',
'00894	中信小資高價30',
'00896	中信綠能及電動車',
'00901	永豐智能車供應鏈',
'00900	富邦特選高股息30',
'00904	新光臺灣半導體30',
'00905	FT臺灣Smart',
'00907	永豐優息存股',
'00912	中信臺灣智慧 50',
'00913	兆豐台灣晶圓製造',
'00915	凱基優選高股息30',
'00919	群益台灣精選高息',
'00918	大華優利高填息30',
'00921	兆豐龍頭等權重',
'00923	群益台灣ESG低碳',
'00922	國泰台灣領袖50',
],height=100,width=25)

    


#btn = tk.Button(window, text='下載圖片',font=('Arial',15,'bold'),bg="#f2bb05")
#btn.place(x=1200,y=400,anchor=NW,width=190,height=100)
#btn = tk.Button(window, text='下載優化成分與比重',font=('Arial',15,'bold'),bg="#f2bb05")
#btn.place(x=1200,y=500,anchor=NW,width=190,height=100)

statistic_name_frame = tk.Frame(window)                  # 加入 statistic_name_frame 框架
statistic_name_frame.place(x=10,y=310,width=200,anchor=NW)

old_statistic_frame = tk.Frame(window)                  # 加入 old_statistic_frame 框架
old_statistic_frame.place(x=220,y=310,width=130,anchor=NW)

new_statistic_frame = tk.Frame(window)                  # 加入 new_statistic_frame  框架
new_statistic_frame.place(x=400,y=310,width=130,anchor=NW)

element_frame = tk.Frame(window)                  # 加入 element_frame  框架
element_frame.place(x=10,y=460,width=200,anchor=NW)

old_weight_frame = tk.Frame(window)                  # 加入 old_weight_frame  框架
old_weight_frame.place(x=220,y=460,width=130,anchor=NW)
new_weight_frame = tk.Frame(window)                  # 加入 new_weight_frame  框架
new_weight_frame.place(x=400,y=460,width=130,anchor=NW)
return_frame = tk.Frame(window)                  # 加入 return_frame  框架
return_frame.place(x=550,y=190,width=620,anchor=NW,height=600)

#_________________________________________________________________________
weight_frame = tk.Frame(window)                  # 加入 element_frame  框架
weight_frame.place(width=500,anchor=NW,height=180)

scrollbar = tk.Scrollbar(weight_frame)               # 將 Frame 裡放入 Scrollbar
scrollbar.pack(side='right', fill='y')        # 設定位置在右側，垂直填滿
weight_text = tk.Text(weight_frame, yscrollcommand=scrollbar.set,height=20,width=400)#, bg="#000000",fg="#FFFF05"
#weight_text.insert("insert", "Hello! \n")
weight_text.config(state="disabled")
#__________________________________________________________________

element_stock_label = tk.Label(statistic_name_frame, 
                   text='成分股組合統計',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#124e78",
                   width=12,
                   #pady=10,
                  )
element_stock_label.pack()
year_return_label = tk.Label(statistic_name_frame, 
                   text='年回報',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#d74e09",
                   width=12
                  )
year_return_label.pack()
change_label = tk.Label(statistic_name_frame, 
                   text='波動率',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#d74e09",
                   width=12
                  )
change_label.pack()
SR_label = tk.Label(statistic_name_frame, 
                   text='Sharpe Ratio',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#d74e09",
                   width=12
                  )
SR_label.pack()
oneday_label = tk.Label(statistic_name_frame, 
                   text='單日最大跌幅',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#d74e09",
                   width=12
                  )
oneday_label.pack()

old_stock_label = tk.Label(old_statistic_frame, 
                   text='現有成分股',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#124e78",
                   width=10
                  )
old_stock_label.pack()
new_stock_label = tk.Label(new_statistic_frame, 
                   text='優化成分股',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#124e78",
                   width=10
                  )
new_stock_label.pack()
return_label = tk.Label(return_frame, 
                   text='報酬率回測',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#124e78",
                   width=800
                  )
return_label.pack()
element_stock_label = tk.Label(element_frame, 
                   text='成分股',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#124e78",
                   width=12
                  )
element_stock_label.pack()

old_weight_label = tk.Label(old_weight_frame, 
                   text='比重',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#124e78",
                   width=200
                  )
old_weight_label.pack()
new_weight_label = tk.Label(new_weight_frame, 
                   text='比重',
                   font=('Arial',15,'bold'),
                   fg='#f0f0c9',
                   bg="#124e78",
                   width=200
                  )
new_weight_label.pack()

    
#
def show_etf_box(): #botton #接宜勳程式
  global etf_id
  etf_id_o = (etf_box.get()).split()
  etf_id = etf_id_o[0]
  m_text.config(state="normal")  # 解除唯讀模式
  m_text.insert("insert", "輸入的ETF為:"+etf_id +" "+etf_id_o[1])#印出參數
  m_text.insert("insert", '\n')
  m_text.config(state="disabled")  # 設置回唯讀模式

etf_box.place(x=300,y=35,anchor=NW)
etf_btn = tk.Button(window, text='確認', command=show_etf_box,bg="#f2bb05")# 建立按鈕，點擊按鈕時，執行 show 函式
etf_btn.place(x=500,y=35,anchor=NW,width=40)

    
def show_amount_box(): #botton
  global rf
  rf = rf_entry.get() #取得無風險報酬
  
  m_text.config(state="normal")  # 解除唯讀模式
  m_text.insert("insert", "輸入無風險報酬為:"+rf+" %" )#印出參數
  m_text.insert("insert", '\n')
  m_text.config(state="disabled")  # 設置回唯讀模式
  rf = float(rf)
    
rf_entry = tk.Entry(window,width=28)
rf_entry.place(x=300,y=70,anchor=NW)
rf_btn = tk.Button(window, text='確認', command=show_amount_box,bg="#f2bb05")# 建立按鈕，點擊按鈕時，執行 show 函式
rf_btn.place(x=500,y=70,anchor=NW,width=40)

def show_entry_box(): #botton
  global type_num_
  type_num_ = amount_entry.get() #取得檔數
  m_text.config(state="normal")  # 解除唯讀模式
  m_text.insert("insert", "輸入檔數為:"+ type_num_ +" 檔")#印出參數
  m_text.insert("insert", '\n')
  m_text.config(state="disabled")  # 設置回唯讀模式
  type_num_ = int(type_num_)

amount_entry = tk.Entry(window,width=28)
amount_entry.place(x=300,y=105,anchor=NW)
amount_btn = tk.Button(window, text='確認', command=show_entry_box,bg="#f2bb05")# 建立按鈕，點擊按鈕時，執行 show 函式
amount_btn.place(x=500,y=105,anchor=NW,width=40)

def show_prefer_box(): #botton
  global type_str_
  type_str_ = prefer_box.get() #取得偏好
  m_text.config(state="normal")  # 解除唯讀模式
  m_text.insert("insert", "輸入偏好為:"+type_str_ )#印出參數
  m_text.insert("insert", '\n')
  m_text.config(state="disabled")  # 設置回唯讀模式
    
prefer_box = ttk.Combobox(window, values=[
'低波動', 
'高股息',
'高本益比',
'高成長',
],height=5,width=25)
prefer_box.place(x=300,y=140,anchor=NW)
prefer_btn = tk.Button(window, text='確認', command=show_prefer_box,bg="#f2bb05")# 建立按鈕，點擊按鈕時，執行 show 函式
prefer_btn.place(x=500,y=140,anchor=NW,width=40)

def show_ExpectedyearEX_box(): #botton
  global ExpectedyearEX
  ExpectedyearEX = ex_entry.get() #取得檔數
  m_text.config(state="normal")  # 解除唯讀模式
  m_text.insert("insert", "輸入期望年報酬率為:"+ ExpectedyearEX +" %")#印出參數
  m_text.insert("insert", '\n')
  m_text.config(state="disabled")  # 設置回唯讀模式
  ExpectedyearEX = float(ExpectedyearEX)

ex_entry = tk.Entry(window,width=28)
ex_entry.place(x=300,y=175,anchor=NW)
ex_btn = tk.Button(window, text='確認', command=show_ExpectedyearEX_box,bg="#f2bb05")# 建立按鈕，點擊按鈕時，執行 show 函式
ex_btn.place(x=500,y=175,anchor=NW,width=40)

#滾輪視窗_________________________________________________________
m_frame = tk.Frame(window) #,height=50,width=50  # 建立 Frame
scrollbar = tk.Scrollbar(m_frame)               # 將 Frame 裡放入 Scrollbar
scrollbar.pack(side='right', fill='y')        # 設定位置在右側，垂直填滿

m_text = tk.Text(m_frame, yscrollcommand=scrollbar.set,height=12,width=85)#, bg="#000000",fg="#FFFF05"


m_text.insert("insert", "Hello! 很高興為您服務!  ◝(　ﾟ∀ ﾟ )◟\n\n")
m_text.config(state="disabled")
def pprint():
    m_text.config(state="normal")  # 解除唯讀模式
    m_text.insert("insert", etf_id )#印出參數
    m_text.insert("insert", '\n')
    m_text.config(state="disabled")  # 設置回唯讀模式
    
#_________________________________________________________________


btn = tk.Button(window, text='一鍵生成專屬ETF',font=('Arial',20,'bold'),bg="#f2bb05",command=generate_etf)#執行博林程式
btn.place(x=15,y=240,anchor=NW,width=520,height=50)
#輸入4參數:etf_id、rf、type_num_、type_str_

#m_text.config(state="disabled")#唯讀
m_text.pack(side=tk.LEFT, fill=tk.Y)
scrollbar.config(command=m_text.yview)    # 設定 scrollbar 綁定 text 的 yview
m_frame.place(x=550,y=30,anchor=NW)

weight_text.pack(side=tk.LEFT, fill=tk.Y)
scrollbar.config(command=weight_text.yview)    # 設定 scrollbar 綁定 text 的 yview
weight_frame.place(x=35,y=500,anchor=NW)



#img =tk.PhotoImage(file='return.png')
#test = tk.Label(return_frame,image=img)
#test.pack()

window.mainloop()
